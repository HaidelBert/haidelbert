on:
  push:
    paths:
    - 'accounting/**'
    - 'vat/**'
    - 'user/**'
    - 'register-of-assets/**'
    - 'frontend/**'
    - 'annual-financial-statements/**'
    - 'e2e/**'
    - '.github/workflows/ci-cd.yml'
name: CI/CD
jobs:
  build-accounting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-accounting
        with:
          paths: accounting
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: accounting
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Migrate test DB
        run: ENV=ci go run ./cmd/migration/migrate.go
        working-directory: accounting
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Test
        run: ENV=ci go test ./...
        working-directory: accounting
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./accounting/Dockerfile
          context: ./accounting
          tags: |
            haidelbert/accounting:${{ github.sha }}
            haidelbert/accounting:latest
          push: true
        if: steps.changed-accounting.outputs.changed == 'true'
  deploy-accounting-staging:
    runs-on: ubuntu-latest
    needs: build-accounting
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-accounting
        with:
          paths: accounting
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Migrate staging DB
        run: ENV=staging POSTGRES_USER=postgres POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }} POSTGRES_HOST=staging.haidelbert.io POSTGRES_PORT=30621 POSTGRES_DB=accounting go run ./cmd/migration/migrate.go
        working-directory: accounting
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image deployment/accounting accounting=haidelbert/accounting:${{ github.sha }} --record --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: rollout status deployment/accounting --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-accounting.outputs.changed == 'true'
  build-annual-financial-statements:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-annual-financial-statements
        with:
          paths: annual-financial-statements
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: annual-financial-statements_test
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Set up jdk11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Migrate Test DB
        working-directory: annual-financial-statements
        run: ./mvnw resources:resources liquibase:update -Ptest
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Test
        working-directory: annual-financial-statements
        run: ./mvnw surefire:test -Dliquibase.should.run=false
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Build
        working-directory: annual-financial-statements
        run: ./mvnw clean package -Dliquibase.should.run=false -Dmaven.test.skip=true
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./annual-financial-statements/src/main/docker/Dockerfile
          context: ./annual-financial-statements
          tags: |
            haidelbert/annual-financial-statements:${{ github.sha }}
            haidelbert/annual-financial-statements:latest
          push: true
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
  deploy-annual-financial-statements-staging:
    runs-on: ubuntu-latest
    needs: build-annual-financial-statements
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-annual-financial-statements
        with:
          paths: annual-financial-statements
      - name: Migrate Staging DB
        working-directory: annual-financial-statements
        run: POSTGRES_USERNAME=postgres POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }} ./mvnw resources:resources liquibase:update -Pstaging
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image deployment/annual-financial-statements annual-financial-statements=haidelbert/annual-financial-statements:${{ github.sha }} --record --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: rollout status deployment/annual-financial-statements --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-frontend
        with:
          paths: frontend
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Prepare CI
        run: chmod +x ./infra/ci/waitForPort.sh
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Test Frontend
        run: |
          npm ci
          (npm run start&)
          npm run lint
          npm run test
          ./../infra/ci/waitForPort.sh 4200
          npm run cypress:run
        working-directory: frontend
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: |
            haidelbert/frontend:${{ github.sha }}
            haidelbert/frontend:latest
          push: true
        if: steps.changed-frontend.outputs.changed == 'true'
  deploy-frontend-staging:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-frontend
        with:
          paths: frontend
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image deployment/frontend frontend=haidelbert/frontend:${{ github.sha }} --record --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: rollout status deployment/frontend --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-frontend.outputs.changed == 'true'
  build-register-of-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-register-of-assets
        with:
          paths: register-of-assets
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: register-of-assets_test
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Test
        run: npm ci && npm run test
        working-directory: register-of-assets
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./register-of-assets/Dockerfile
          context: ./register-of-assets
          tags: |
            haidelbert/register-of-assets:${{ github.sha }}
            haidelbert/register-of-assets:latest
          push: true
        if: steps.changed-register-of-assets.outputs.changed == 'true'
  deploy-register-of-assets-staging:
    runs-on: ubuntu-latest
    needs: build-register-of-assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-register-of-assets
        with:
          paths: register-of-assets
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: NPM CI
        run: npm ci
        working-directory: register-of-assets
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Migrate Staging DB
        working-directory: register-of-assets
        run: TYPEORM_HOST=staging.haidelbert.io TYPEORM_PORT=30621 TYPEORM_USERNAME=postgres TYPEORM_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }} npm run migrate
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image deployment/register-of-assets register-of-assets=haidelbert/register-of-assets:${{ github.sha }} --record --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: rollout status deployment/register-of-assets --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-register-of-assets.outputs.changed == 'true'
  build-user:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-user
        with:
          paths: user
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        if: steps.changed-user.outputs.changed == 'true'
      - name: Test
        run: ENV=ci go test ./...
        working-directory: user
        if: steps.changed-user.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-user.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-user.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-user.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./user/Dockerfile
          context: ./user
          tags: |
            haidelbert/user:${{ github.sha }}
            haidelbert/user:latest
          push: true
        if: steps.changed-user.outputs.changed == 'true'
  deploy-user-staging:
    runs-on: ubuntu-latest
    needs: build-user
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-user
        with:
          paths: user
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        if: steps.changed-user.outputs.changed == 'true'
      - name: Migrate staging DB
        run: ENV=staging mongoUrl=${{ secrets.MONGOURL_STAGING }} go run ./cmd/migration/migration.go
        working-directory: user
        if: steps.changed-user.outputs.changed == 'true'
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image deployment/user user=haidelbert/user:${{ github.sha }} --record --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-user.outputs.changed == 'true'
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: rollout status deployment/user --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-user.outputs.changed == 'true'
  build-vat:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-vat
        with:
          paths: vat
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: vat_test
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Set up jdk11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Migrate Test DB
        working-directory: vat
        run: ./mvnw resources:resources liquibase:update -Ptest
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Test
        working-directory: vat
        run: ./mvnw surefire:test -Dquarkus-profile=test -Ptest
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Build Native
        working-directory: vat
        run: ./mvnw package -Pnative -Dquarkus.native.container-build=true -Dliquibase.should.run=false
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./vat/src/main/docker/Dockerfile.native
          context: ./vat
          tags: |
            haidelbert/vat:${{ github.sha }}
            haidelbert/vat:latest
          push: true
        if: steps.changed-vat.outputs.changed == 'true'
  deploy-vat-staging:
    runs-on: ubuntu-latest
    needs: build-vat
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: marceloprado/has-changed-path@v1
        id: changed-vat
        with:
          paths: vat
      - name: Set up jdk11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Migrate Staging DB
        working-directory: vat
        run: POSTGRES_USERNAME=postgres POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }} ./mvnw resources:resources liquibase:update -Pstaging
        if: steps.changed-vat.outputs.changed == 'true'
      - name: deploy to cluster
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: set image deployment/vat vat=haidelbert/vat:${{ github.sha }} --record --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-vat.outputs.changed == 'true'
      - name: verify deployment
        uses: steebchen/kubectl@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          KUBECTL_VERSION: "1.15"
        with:
          args: rollout status deployment/vat --namespace haidelbert --context staging --insecure-skip-tls-verify=true
        if: steps.changed-vat.outputs.changed == 'true'
  e2e:
    runs-on: ubuntu-latest
    needs: [deploy-vat-staging,deploy-user-staging,deploy-register-of-assets-staging,deploy-annual-financial-statements-staging,deploy-accounting-staging]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Prepare
      run: npm ci
      working-directory: e2e
    - name: Test
      run: CYPRESS_BASE_URL=http://frontend-staging.haidelbert.io npm run cypress:run
      working-directory: e2e
