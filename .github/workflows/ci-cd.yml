on:
  push:
    paths:
    - 'accounting/**'
    - 'vat/**'
    - 'user/**'
    - 'register-of-assets/**'
    - 'frontend/**'
    - 'annual-financial-statements/**'
    - 'e2e/**'
    - '.github/workflows/ci-cd.yml'
name: CI/CD
jobs:
  build-accounting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: marceloprado/has-changed-path@v1
        id: changed-accounting
        with:
          paths: accounting
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: accounting_test
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Migrate test DB
        run: ENV=ci go run ./cmd/migration/migrate.go
        working-directory: accounting
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Test
        run: ENV=ci go test ./...
        working-directory: accounting
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-accounting.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./accounting/Dockerfile
          context: ./accounting
          tags: |
            haidelbert/accounting:${{ github.sha }}
            haidelbert/accounting:latest
          push: true
        if: steps.changed-accounting.outputs.changed == 'true'
  build-annual-financial-statements:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: marceloprado/has-changed-path@v1
        id: changed-annual-financial-statements
        with:
          paths: annual-financial-statements
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: annual_financial_statements_test
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Set up jdk11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Migrate Test DB
        working-directory: annual-financial-statements
        run: ./mvnw resources:resources liquibase:update -Ptest
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Test
        working-directory: annual-financial-statements
        run: ./mvnw surefire:test -Dliquibase.should.run=false
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Build
        working-directory: annual-financial-statements
        run: ./mvnw clean package -Dliquibase.should.run=false -Dmaven.test.skip=true
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./annual-financial-statements/src/main/docker/Dockerfile
          context: ./annual-financial-statements
          tags: |
            haidelbert/annual-financial-statements:${{ github.sha }}
            haidelbert/annual-financial-statements:latest
          push: true
        if: steps.changed-annual-financial-statements.outputs.changed == 'true'
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: marceloprado/has-changed-path@v1
        id: changed-frontend
        with:
          paths: frontend
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Prepare CI
        run: chmod +x ./infra/ci/waitForPort.sh
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Test Frontend
        run: |
          npm ci
          (npm run start&)
          npm run lint
          npm run test
          ./../infra/ci/waitForPort.sh 4200
          npm run cypress:run
        working-directory: frontend
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-frontend.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: |
            haidelbert/frontend:${{ github.sha }}
            haidelbert/frontend:latest
          push: true
        if: steps.changed-frontend.outputs.changed == 'true'
  build-register-of-assets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: marceloprado/has-changed-path@v1
        id: changed-register-of-assets
        with:
          paths: register-of-assets
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: register-of-assets_test
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Test
        run: npm ci && npm run test
        working-directory: register-of-assets
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-register-of-assets.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./register-of-assets/Dockerfile
          context: ./register-of-assets
          tags: |
            haidelbert/register-of-assets:${{ github.sha }}
            haidelbert/register-of-assets:latest
          push: true
        if: steps.changed-register-of-assets.outputs.changed == 'true'
  build-user:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: marceloprado/has-changed-path@v1
        id: changed-user
        with:
          paths: user
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15
        if: steps.changed-user.outputs.changed == 'true'
      - name: Test
        run: ENV=ci go test ./...
        working-directory: user
        if: steps.changed-user.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-user.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-user.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-user.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./user/Dockerfile
          context: ./user
          tags: |
            haidelbert/user:${{ github.sha }}
            haidelbert/user:latest
          push: true
        if: steps.changed-user.outputs.changed == 'true'
  build-vat:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - uses: marceloprado/has-changed-path@v1
        id: changed-vat
        with:
          paths: vat
      - name: Setup Postgres
        uses: harmon758/postgresql-action@v1
        with:
          postgresql user: postgres
          postgresql password: root
          postgresql db: vat_test
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Set up jdk11
        uses: actions/setup-java@v1
        with:
          java-version: 11
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Migrate Test DB
        working-directory: vat
        run: ./mvnw resources:resources liquibase:update -Ptest
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Test
        working-directory: vat
        run: ./mvnw surefire:test -Dquarkus-profile=test -Ptest
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Build Native
        working-directory: vat
        run: ./mvnw package -Pnative -Dquarkus.native.container-build=true -Dliquibase.should.run=false
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: steps.changed-vat.outputs.changed == 'true'
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./vat/src/main/docker/Dockerfile.native
          context: ./vat
          tags: |
            haidelbert/vat:${{ github.sha }}
            haidelbert/vat:latest
          push: true
        if: steps.changed-vat.outputs.changed == 'true'
  e2e:
    runs-on: ubuntu-latest
    needs: [build-accounting,build-annual-financial-statements,build-frontend,build-register-of-assets,build-user,build-vat]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Start Tools compose
      run: |
        docker-compose -f ci-compose.yml up -d zoo kafka minio1 minio2 postgres mongo
        ./waitForPort.sh 5432 30
        ./waitForPort.sh 9092 30
        ./waitForPort.sh 27017 30
        ./waitForPort.sh 2181 30
        ./waitForPort.sh 9190 30
        ./waitForPort.sh 9191 30
      working-directory: infra/ci
    - name: Migrate Accounting DB
      run: POSTGRES_USER=postgres POSTGRES_PASSWORD=root POSTGRES_HOST=localhost POSTGRES_PORT=5432 POSTGRES_DB=accounting go run ./cmd/migration/migrate.go
      working-directory: accounting
    - name: Migrate AFS DB
      working-directory: annual-financial-statements
      run: ./mvnw resources:resources liquibase:update -Pstaging
    - name: Migrate ROA DB
      working-directory: register-of-assets
      run: |
        npm ci
        TYPEORM_HOST=localhost TYPEORM_PORT=5432 TYPEORM_USERNAME=postgres TYPEORM_PASSWORD=root npm run migrate
    - name: Migrate User DB
      run: mongoUrl=mongodb://root:root@localhost:27017 go run ./cmd/migration/migration.go
      working-directory: user
    - name: Migrate VAT DB
      working-directory: vat
      run: POSTGRES_USERNAME=postgres POSTGRES_PASSWORD=root ./mvnw resources:resources liquibase:update -Pstaging
    - name: Start Services compose
      run: |
        ACCOUNTING_TAG=latest  docker-compose -f ci-compose.yml up -d user-service accounting-service vat-service annual-financial-statements-service register-of-assets-service frontend-service
        ./waitForPort.sh 3000 30
        ./waitForPort.sh 80 30
        ./waitForPort.sh 8080 30
        ./waitForPort.sh 9095 30
        ./waitForPort.sh 9090 30
        ./waitForPort.sh 9091 30
      working-directory: infra/ci
    - name: Prepare
      run: npm ci
      working-directory: e2e
    - name: Test
      run: CYPRESS_POSTGRES_HOST=localhost CYPRESS_POSTGRES_PORT=5432 CYPRESS_POSTGRES_PASSWORD=root CYPRESS_MONGO_URL=mongodb://root:root@localhost:27017 CYPRESS_BASE_URL=http://localhost npm run cypress:run
      working-directory: e2e
    - name: Collect logs
      run: |
        docker-compose -f ci-compose.yml logs
        docker-compose -f ci-compose.yml logs > compose.logs
      working-directory: infra/ci
      if: always()
    - name: Archive e2e artifacts
      uses: actions/upload-artifact@v2
      if: always()
      with:
        name: e2e-artifacts
        path: |
          e2e/cypress/screenhsots
          e2e/cypress/videos
          infra/ci/compose.logs
